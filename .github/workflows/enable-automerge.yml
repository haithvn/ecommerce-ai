name: Enable Auto-Merge
on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, ready_for_review]

permissions:
  contents: write
  pull-requests: write

jobs:
  enable:
    if: startsWith(github.head_ref, 'mel-') || contains(github.event.pull_request.labels.*.name, 'automerge')
    runs-on: ubuntu-latest
    steps:
      - name: Try REST: enable auto-merge (squash)
        id: rest
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const pr = context.payload.pull_request;
            const resp = await github.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/auto_merge', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              merge_method: 'squash'
            });
            core.notice(`REST enabled auto-merge for #${pr.number} (status ${resp.status})`);

      - name: Fallback GraphQL if REST failed
        if: steps.rest.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            // Lấy node_id của PR (GraphQL cần ID kiểu node)
            const { data } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            const nodeId = data.node_id;

            // Bật auto-merge qua GraphQL
            const res = await github.graphql(
              `mutation($pullRequestId:ID!, $mergeMethod:PullRequestMergeMethod!){
                 enablePullRequestAutoMerge(input:{
                   pullRequestId: $pullRequestId,
                   mergeMethod: $mergeMethod
                 }) { clientMutationId }
               }`,
              { pullRequestId: nodeId, mergeMethod: 'SQUASH' }
            );
            core.notice(`GraphQL enabled auto-merge for #${pr.number}`);
