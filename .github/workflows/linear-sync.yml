name: Sync Linear on Merge
on:
  pull_request:
    types: [closed]

jobs:
  linear:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title || "";
            const body = pr.body || "";
            const branch = pr.head.ref;

            // Tìm issueKey từ title/body/branch
            const m = (title + " " + body + " " + branch).match(/(MEL-\d+)/i);
            if (!m) {
              core.warning("No issue key found");
              return;
            }
            const issueKey = m[1].toUpperCase();

            // Gọi Linear GraphQL
            const fetch = require('node-fetch');
            const gql = async (query, variables) => {
              const res = await fetch('https://api.linear.app/graphql', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': process.env.LINEAR_API_KEY
                },
                body: JSON.stringify({ query, variables })
              });
              const json = await res.json();
              if (json.errors) throw new Error(JSON.stringify(json.errors));
              return json.data;
            };

            // Lookup issue by key
            const data = await gql(`
              query IssueByKey($key: String!) {
                issue: issueByKey(key: $key) { id team { states { nodes { id name } } } }
              }`, { key: issueKey });

            if (!data.issue) { core.warning("Issue not found"); return; }

            // Move to Done (tìm state "Done")
            const states = data.issue.team.states.nodes;
            const done = states.find(s => /done|closed/i.test(s.name));
            if (done) {
              await gql(`mutation Update($id: String!, $stateId: String!) {
                issueUpdate(id: $id, input: { stateId: $stateId }) { success }
              }`, { id: data.issue.id, stateId: done.id });
            }

            // Comment link PR
            await gql(`mutation Comment($id: String!, $body: String!) {
              commentCreate(input: { issueId: $id, body: $body }) { success }
            }`, { id: data.issue.id, body: `Merged: ${pr.html_url}` });

            core.notice(`Updated Linear ${issueKey}`);
